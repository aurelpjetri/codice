extensions [ nw ]

globals [
  world-offset
  global-street-distance
  global-street-width
  global-non-wall-color
]

;; Beacons are nodes in our network that comunicate
;; the shortest path to the movers that need to
;; reach their destination
breed [beacons beacon]
;; These turtles are used for street drawing
breed [street-drawers street-drawer]

;; Streets are links between beacons with certain capacity
undirected-link-breed [streets street]

streets-own [
  weight
  street-width
]

street-drawers-own [
  drawer-destination
  drawer-width
]

beacons-own [
  intersection-width
  intersection-height
  intersection-radius
  interest-point?
  entry-point?
  exit-point?
]

;; Patches can be wall so they are now walkable
patches-own [
  wall
]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ALL THE CONTROL AND SETUP SECTION HAS BEEN MOVED TO THE BOTTOM OF THE FILE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; CONTROL SECTION
;; ===============

to setup
  ;; First we clear everything
  clear-all
  reset-ticks

  ;; Set the default shapes and the global variables
  default-configuration

  ;; After that we can generate our map
  generate-map
end

to export
  export-world export-filename
end


;; Used to set the defaults and globals
to default-configuration
  set-default-shape beacons "box"
  set world-offset 10
  set global-street-distance 15
  set global-street-width 3
  set global-non-wall-color 9
end



;; HELPER TASKS
;; ============

;; Set all the patches to walls, and then exlude those
;; with correct color
to make-patches-non-wall
  ask patches [set wall true]
  ask patches with [pcolor = global-non-wall-color] [set wall false]
end

;; Ask the agent to paint the list of patches around him
;; contained in a list-of-patches list
to paint-patches [agent list-of-patches]
  ask agent [paint-agents patches at-points list-of-patches]
end

to paint-patches-in-radius [agent-radius]
  ask patches in-radius agent-radius [ set pcolor global-non-wall-color ]
end

;; This is a helper procedure, used to set the color of a set of patches.
to paint-agents [agents]
  ask agents [ set pcolor global-non-wall-color ]
end

;; This reporter returns a list of patch positions relative to [0 0]
;; of given width and height. Should be used to draw squares and streets
;; iteratively
to-report get-square-patches [square-width square-height]
  let square-patches []
  foreach n-values square-height [?] [
    let current-row ?
    foreach n-values square-width [?] [
      set square-patches sentence square-patches (list map-to-tuple current-row ?)
    ]
  ]
  report square-patches
end

;; Given a set of relative square patches, with their width and height
;; return a centralized set of patches around the relative [0 0] position
to-report centralize-patches [square-patches square-width square-height]
  let diff-width floor (square-width / 2)
  let diff-height floor (square-height / 2)
  set square-patches map [list (item 0 ? - diff-height) (item 1 ? - diff-width)] square-patches
  report square-patches
end

to-report map-to-tuple [elem1 elem2]
  report (list elem1 elem2)
end

;; STREET DRAWERS
;; ==============

;; Draw squares takes all the beacons and draws the square
;; base on their local variables of width and height
to draw-squares
  ask beacons [
    ifelse intersection-width > 0 and intersection-height > 0
    [ let patches-to-paint centralize-patches (get-square-patches intersection-width intersection-height) intersection-width intersection-height
      paint-patches self patches-to-paint ]
    [ paint-patches-in-radius intersection-radius ]

  ]
end

to draw-streets
  generate-street-drawers
  actually-draw-streets
  ask street-drawers [die]
end

to generate-street-drawers
  ask beacons [
    ask my-streets [
      let d-destination other-end
      let d-width street-width
      ask myself [
        hatch-street-drawers 1 [
          set drawer-destination d-destination
          set drawer-width d-width
        ]
      ]
    ]
  ]
end

to actually-draw-streets
  ask street-drawers [
    let patches-to-paint centralize-patches (get-square-patches drawer-width drawer-width) drawer-width drawer-width
    while [destination-reached? self drawer-destination] [
      paint-patches self patches-to-paint
      drawer-move-ahead "straight" drawer-destination
    ]
  ]
end

to drawer-move-ahead [moving-style move-destination]
  if moving-style = "diagonal" [
    face move-destination
    move-to next-patch
  ]
  if moving-style = "straight" [
    face move-destination
    fd 1
  ]
end

to-report destination-reached? [agent agent-destination]
  ifelse [patch-here] of agent != [patch-here] of agent-destination
  [ report true ]
  [ report false ]
end

;; report next patch of a von neumann neighborhood
to-report next-patch  ;; turtle procedure
  if heading < towardsxy (pxcor + 0.5) (pycor + 0.5)
    [ report patch-at 0 1 ]
  if heading < towardsxy (pxcor + 0.5) (pycor - 0.5)
    [ report patch-at 1 0 ]
  if heading < towardsxy (pxcor - 0.5) (pycor - 0.5)
    [ report patch-at 0 -1 ]
  if heading < towardsxy (pxcor - 0.5) (pycor + 0.5)
    [ report patch-at -1 0 ]
  report patch-at 0 1
end


to make-beacon-normal
  set entry-point? false
  set exit-point? false
  set interest-point? false
end

to make-beacon-entry
  set entry-point? true
  set exit-point? false
  set interest-point? false
end

to make-beacon-exit
  set entry-point? false
  set exit-point? true
  set interest-point? false
end

;FUNZIONE DI APPOGGIO SCRITTA DA ME
;restituisce il beacon alle coordinate x y
to-report get-beacon-at [x y]
  let current-beacon []
  ask patch x y [
    set current-beacon beacons-here
  ]
  report one-of current-beacon
end

;;******************************************
to generate-map
  let new-world-width 2 * world-offset + 20
  let new-world-height 2 * world-offset + 10
  resize-world 0 new-world-width 0 new-world-height 

  generate-beacons 
  connect-beacons 
  draw-squares 
  draw-streets 
  make-patches-non-wall 

end 

to generate-beacons
  ask patch (world-offset + 0) (world-offset + 0) [sprout-beacons 1 [
    make-beacon-normal
    set intersection-width 5
    set intersection-height 5
    set intersection-radius 5
  ]]
  ask patch (world-offset + 0) (world-offset + 10) [sprout-beacons 1 [
    make-beacon-normal
    set intersection-width 5
    set intersection-height 5
    set intersection-radius 5
  ]]
  ask patch (world-offset + 10) (world-offset + 10) [sprout-beacons 1 [
    make-beacon-normal
    set intersection-width 5
    set intersection-height 5
    set intersection-radius 5
  ]]
  ask patch (world-offset + 20) (world-offset + 0) [sprout-beacons 1 [
    make-beacon-normal
    set intersection-width 5
    set intersection-height 5
    set intersection-radius 5
  ]]
end
to connect-beacons
  ask get-beacon-at (world-offset + 0) (world-offset + 0) [
    create-street-with get-beacon-at (world-offset + 0) (world-offset + 10) [
      set weight 3
      set street-width 3]]
  ask get-beacon-at (world-offset + 0) (world-offset + 10) [
    create-street-with get-beacon-at (world-offset + 10) (world-offset + 10) [
      set weight 3
      set street-width 3]]
  ask get-beacon-at (world-offset + 10) (world-offset + 10) [
    create-street-with get-beacon-at (world-offset + 20) (world-offset + 0) [
      set weight 3
      set street-width 3]]
  ask get-beacon-at (world-offset + 0) (world-offset + 0) [
    create-street-with get-beacon-at (world-offset + 20) (world-offset + 0) [
      set weight 3
      set street-width 3]]
end
