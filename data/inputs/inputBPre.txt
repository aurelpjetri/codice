extensions [nw table]

;; Beacons are nodes in our network that comunicate
;; the shortest path to the movers that need to
;; reach their destination
breed [beacons beacon]
;; These turtles are used for street drawing
breed [street-drawers street-drawer]

;; Movers are turtles that need to reach certain destinations
breed [movers mover]

;; Streets are links between beacons with certain capacity
undirected-link-breed [streets street]
directed-link-breed [directed-streets directed-street]

movers-own [
  destination-beacon ;; current destination moving towards
  destination-list ;; list of all my locations
  destination-order ;; Table with strategies to calculate my next destination
  destination-reached ;; whether I've reached the current destination
  current-beacon ;; current beacon on my path
  previous-beacon ;; beacon that I'm coming from
  undesired-street ;; street that is not included in my path, since i got stuck there
  speed
  mover-behavior
  should-move? ;; used when calculating the next patch
  patience ;; for how long can I be stuck before changing my direction

  movers-data ;; used for outputing some results
]

streets-own [
  weight
  street-width
]

directed-streets-own [
  weight
  street-width
]

street-drawers-own [
  drawer-destination
  drawer-width
]

beacons-own [
  intersection-width
  intersection-height
  intersection-radius
  interest-point?
  entry-point?
  entry-ratios
  exit-point?
]

;; Patches can be wall so they are now walkable
patches-own [
  wall
]

globals [
  ;; these need to be redefined
  global-crowd-max-at-patch

  ;; global tables
  destination-ordering
  behaviors-map

  ;; Needed for import to work
  world-offset
  global-street-distance
  global-street-width
  global-non-wall-color
  grid-size
  n-interest-points
  export-filename

  ;; Needed for results collection
  global-movers-results
  global-list-interest-points
  global-list-exit-points
]

;; IMPORT AND DEFAULTS
;; ===================

to setup
  import-world import-filename
  default-configuration
end


;; GO PROCEDURE
;; ============

to go
  if use-exits = true [ old-movers-leave ]
  if use-entries = true [ new-movers-enter ]
  move
  tick
end

to old-movers-leave
  ask beacons with [exit-point? = true] [
    let exit-beacon self
    ask patches in-radius intersection-radius [
      ask movers-here [
        if random-float 1 < exit-ratio and empty? destination-list [
          ;; generate final data and put them in a global var
          movers-data-collect exit-beacon
          movers-data-move-to-global
          die ] ]
    ]
  ]
end

to new-movers-enter
  ask beacons with [entry-point? = true] [
    ask patches in-radius intersection-radius with [count movers-here < global-crowd-max-at-patch] [
      if random-float 1 < entry-ratio [
        generate-new-mover
      ]
    ]
  ]
end


;; Populate the table movers-data with some information needed for results
to movers-data-setup
  set movers-data table:make
  table:put movers-data "enter" ticks
  table:put movers-data "total_agents" count movers
  foreach (sentence global-list-interest-points global-list-exit-points) [
    table:put movers-data (word "agents_" ?) count (movers with [destination-beacon = ?])
    table:put movers-data (word "exit_" ?) 0
  ]
end

;; Collect the data before a mover dies, and then put them in global var
to movers-data-collect [passing-beacon]
  ;; Only collect the time the first time we pass a destination
  if table:get movers-data (word "exit_" passing-beacon) = 0
   [table:put movers-data (word "exit_" passing-beacon) ticks]
end

to movers-data-move-to-global
  table:put global-movers-results who table:to-list movers-data
end

;; Given a list of behaviours and their probabilities
;; returns a random behaviour wrt to those probabilities
to-report get-random-mover-behaviour [iter-list]
  let random-dice random 100
  let acc 0
  foreach iter-list [
    set acc acc + (item 1 ?)
    if random-dice < acc
      [ report item 0 ? ]
  ]
end

;; MOVE PROCEDURE
;; ==============

;; Just a standard task that calls all the right procedures
to move
  update-path
  update-next-patch
  ask movers with [should-move? = true] [ fd speed ]
  ask movers with [should-move? = false] [ set patience patience - 1]
  ask movers with [patience <= 0] [
    orient-random-mover self
    set patience random (3 + global-patience)
  ]
end


to check-if-involuntary-destination [agent tmp-beacon]
  if member? tmp-beacon [destination-list] of agent [
    let new-destination-list filter [? != tmp-beacon] [destination-list] of agent
    ask agent [set destination-list new-destination-list
               movers-data-collect tmp-beacon]
  ]
end

to update-next-patch
  ask movers with [destination-reached = false] [
    set should-move? false

    ;; get an ordered list of patches where i could move
    let oriented-list oriented-list-of-patches neighbors4 in-cone 2 180 with [wall = false]
    foreach reverse oriented-list [
      if free-mover-patch ? [
        face ?
        set should-move? true
      ]
    ]
  ]
end

;; Returns a list of patches that are ordered by in ascending order
;; wrt the difference between movers heading and the position of
;; the patch, i.e. returns an ordered list of the best patches to
;; visit
to-report oriented-list-of-patches [reachable-patches]
  report sort-on [abs subtract-headings [heading] of myself (towards myself + 180) mod 360] reachable-patches
end

;; Reports whether the patch passed has actually enough free space
to-report free-mover-patch [mover-patch]
  ifelse global-crowd-max-at-patch > [count movers-here] of mover-patch
    [report true]
    [report false]
end

;; ==================================================================
;; This is called when a mover gets blocked, he should in some way
;; backtrack to the previous beacon and try to find a path that
;; does not include the current-beacon
;; ==================================================================
to orient-random-mover [random-mover]
  ask previous-beacon [
    let possible-undesired-street one-of my-streets with [other-end = [current-beacon] of random-mover]
    nw:set-context (beacons) ((link-set streets directed-streets) with [self != possible-undesired-street])
    let full-path nw:turtles-on-weighted-path-to [destination-beacon] of myself "weight"

    if not empty? full-path [
      ask myself [
        ;; if there is another way of reaching the current destination
        ;; then put the current street as undesirable
        set undesired-street possible-undesired-street
        ;; if my previous beacon is different from the current and destination I should move
        ;; towards it => (item 0 full-path), otherwise there will be more than one element
        ;; in the full-path and it is more convenient to move towards the (item 1 full-path)
        ifelse current-beacon != previous-beacon ;and previous-beacon != destination-beacon
          [set current-beacon item 0 full-path]
          [ifelse previous-beacon != destination-beacon
            [set current-beacon item 1 full-path]
            [set current-beacon item 0 full-path]
          ]
      ]
    ]
  ]
end

;; ==================================================================
;; DESTINATION STRATEGIES
;; ==================================================================
;; Called inside the mover context

to set-destination-min-distance
  let origin-beacon current-beacon
  set destination-list sort-by [
    [nw:weighted-distance-to origin-beacon "weight"] of ?1 <
      [nw:weighted-distance-to origin-beacon "weight"] of ?2 ] destination-list
  set destination-beacon item 0 destination-list
end

to set-destination-ordered-list
  set destination-beacon item 0 destination-list
end

;; ==================================================================
;; SOME CONTROL PROCEDURES
;; ==================================================================
to toggle-graph-view
  ask streets [set hidden? not hidden?]
  ask beacons with [interest-point? = false] [set hidden? not hidden?]
end

to change-poi
  toggle-graph-view
  let poi-die one-of beacons with [interest-point? = true]
  ask one-of beacons with [interest-point? = false and entry-point? = false and exit-point? = false] [
    set interest-point? true
  ]
  ask poi-die [set interest-point? false]
  toggle-graph-view
end

;; ==================================================================
;; RESULTS OUTPUT
;; ==================================================================
;; Called at the end by the BehaviourSpace

to register-results
  ;; open a file
  file-open (word "experiment_" behaviorspace-experiment-name "_run_" behaviorspace-run-number ".csv")

  let onei first table:keys global-movers-results
  file-print to-csv (list "who" (to-csv map [item 0 ?] table:get global-movers-results onei))
  foreach table:keys global-movers-results [
    file-print to-csv (list ? (to-csv map [item 1 ?] table:get global-movers-results ?))
  ]

  ;; close it
  file-close
end

to-report to-csv [l]
  report reduce [(word ?1 ", " ?2)] l
end

;;=================== modificate

;; Check if I've reached the beacons and update my path,
;; otherwise keep going towards the current-beacon
to update-path
  ask movers [
    let next-beacon current-beacon
    let current-mover self

    ;; have I reached the current beacon?
    ask current-beacon [
      if member? [patch-here] of myself patches in-radius intersection-radius [
        ;; set the previous beacon to the current-one, since we have reached it
        ask myself [set previous-beacon current-beacon]

        ;; Control if this beacon is in my destination list and remove it
        check-if-involuntary-destination current-mover self

        ;; calculate the full path to my destination
        nw:set-context (beacons) ((link-set streets directed-streets) with [self != [undesired-street] of current-mover])
        let full-path nw:turtles-on-weighted-path-to [destination-beacon] of myself "weight"

        ;; If there are more than one beacon in the path I haven't reached my destination
        ;; nw-path returns with the current beacon, so we take only the tail of the list
        if not empty? but-first full-path
          [ ask myself [set current-beacon item 1 full-path] ]

        ;; if only one item is present in the weighted path
        ;; a destination-beacon has been reached, here we check with if for
        ;; more security
        if self = [destination-beacon] of myself
          [
            ;; remove the current destination-beacon from this list
            ask current-mover [
              ifelse not empty? destination-list
                ;;[ run table:get destination-ordering destination-order]
			    [set-destination-min-distance]
                [ set destination-beacon min-one-of (beacons with [exit-point? = true]) [distance myself]]
                ;[ set destination-beacon one-of beacons with [exit-point? = true]]
              set color [color] of destination-beacon
          ] ]
      ]
    ]
    face current-beacon
  ]
end

to generate-new-mover
  sprout-movers 1 [
    set current-beacon min-one-of beacons [distance myself]
    set previous-beacon current-beacon
    set undesired-street false
    set speed 0.1
    set patience global-patience

    ;; destination part uses current-node so declare it after
    ;; destination list is saved as a list so we can do more complex
    ;; operations on it.. agentsets are always in random order.
    ;; By simply calling sort on an agentset, we get an ordered list

	;;------------------------------------------------------------------------------
    
    set mover-behavior get-random-mover-behaviour [entry-ratios] of current-beacon     

	set destination-list table:get behaviors-map mover-behavior
    set destination-list sort destination-list
	
	set-destination-min-distance

	;;-------------------------------------------------------------------------------
	
    set destination-reached false

    ;; set transparency
    set color [color] of destination-beacon
    ifelse is-list? color
      [ set color lput 100 sublist color 0 3 ]
      [ set color lput 100 extract-rgb color ]

  ]
end


to-report get-interest-beacons [coor-list]
  let list-of-beacons []
  foreach  coor-list [
    set list-of-beacons lput (item 0 sort (beacons-on patch (item 0 ?) (item 1 ?))) list-of-beacons
  ]
  report list-of-beacons
end

;; =================== INIZIO